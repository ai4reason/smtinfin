(set-info :smt-lib-version 2.6)
(set-logic UFLIA)
(set-info :source |Benchmarks from the paper: "Extending Sledgehammer with SMT Solvers" by Jasmin Blanchette, Sascha Bohme, and Lawrence C. Paulson, CADE 2011.  Translated to SMT2 by Andrew Reynolds and Morgan Deters.|)
(set-info :category "industrial")
(set-info :status unknown)
(declare-sort S1 0)
(declare-sort S2 0)
(declare-sort S3 0)
(declare-sort S4 0)
(declare-sort S5 0)
(declare-sort S6 0)
(declare-sort S7 0)
(declare-sort S8 0)
(declare-sort S9 0)
(declare-sort S10 0)
(declare-sort S11 0)
(declare-sort S12 0)
(declare-sort S13 0)
(declare-sort S14 0)
(declare-sort S15 0)
(declare-sort S16 0)
(declare-sort S17 0)
(declare-sort S18 0)
(declare-fun f1 () S1)
(declare-fun f2 () S1)
(declare-fun f3 (S3 S2) S1)
(declare-fun f4 () S3)
(declare-fun f5 (S3 S3) S1)
(declare-fun f6 () S3)
(declare-fun f7 (S4 S3) S3)
(declare-fun f8 (S2) S4)
(declare-fun f9 (S5 S6) S2)
(declare-fun f10 (S7 S8) S5)
(declare-fun f11 (S9 S6) S7)
(declare-fun f12 () S9)
(declare-fun f13 () S6)
(declare-fun f14 () S8)
(declare-fun f15 () S6)
(declare-fun f16 (S10 S8) S2)
(declare-fun f17 () S10)
(declare-fun f18 (S3 S3) S1)
(declare-fun f19 (S12 S11) S1)
(declare-fun f20 (S6 S11) S12)
(declare-fun f21 (S2 S3) S1)
(declare-fun f22 (S14 S2) S15)
(declare-fun f23 (S16 S13) S14)
(declare-fun f24 () S16)
(declare-fun f25 (S17 Int) S15)
(declare-fun f26 () S17)
(declare-fun f27 (S3) S3)
(declare-fun f28 (S18 S15) Int)
(declare-fun f29 () S18)
(assert (not (= f1 f2)))
(assert (forall ((?v0 S2)) (= (= (f3 f4 ?v0) f1) false)))
(assert (not (= (f5 f6 (f7 (f8 (f9 (f10 (f11 f12 f13) f14) f15)) f6)) f1)))
(assert (= (f5 f6 (f7 (f8 (f16 f17 f14)) f6)) f1))
(assert (= (f18 f6 (f7 (f8 (f9 (f10 (f11 f12 f13) f14) f15)) f6)) f1))
(assert (forall ((?v0 S3)) (= (f5 ?v0 f6) f1)))
(assert (forall ((?v0 S6) (?v1 S8) (?v2 S6) (?v3 S6) (?v4 S8) (?v5 S6)) (= (= (f9 (f10 (f11 f12 ?v0) ?v1) ?v2) (f9 (f10 (f11 f12 ?v3) ?v4) ?v5)) (and (= ?v0 ?v3) (and (= ?v1 ?v4) (= ?v2 ?v5))))))
(assert (forall ((?v0 S3) (?v1 S3)) (=> (= (f5 ?v0 ?v1) f1) (= (f18 ?v0 ?v1) f1))))
(assert (forall ((?v0 S3) (?v1 S3) (?v2 S3)) (=> (= (f5 ?v0 ?v1) f1) (=> (= (f5 ?v2 ?v0) f1) (= (f5 ?v2 ?v1) f1)))))
(assert (forall ((?v0 S3) (?v1 S2) (?v2 S3)) (let ((?v_0 (f8 ?v1))) (=> (= (f5 ?v0 (f7 ?v_0 f6)) f1) (=> (= (f5 ?v0 ?v2) f1) (= (f5 ?v0 (f7 ?v_0 ?v2)) f1))))))
(assert (forall ((?v0 S3) (?v1 S2) (?v2 S3)) (let ((?v_0 (f8 ?v1))) (=> (= (f5 ?v0 (f7 ?v_0 ?v2)) f1) (and (= (f5 ?v0 (f7 ?v_0 f6)) f1) (= (f5 ?v0 ?v2) f1))))))
(assert (forall ((?v0 S3) (?v1 S6) (?v2 S8) (?v3 S6) (?v4 S6)) (let ((?v_0 (f10 (f11 f12 ?v1) ?v2))) (=> (= (f5 ?v0 (f7 (f8 (f9 ?v_0 ?v3)) f6)) f1) (=> (forall ((?v5 S11) (?v6 S11)) (=> (= (f19 (f20 ?v3 ?v5) ?v6) f1) (= (f19 (f20 ?v4 ?v5) ?v6) f1))) (= (f5 ?v0 (f7 (f8 (f9 ?v_0 ?v4)) f6)) f1))))))
(assert (forall ((?v0 S3) (?v1 S6) (?v2 S8) (?v3 S6) (?v4 S6)) (=> (= (f5 ?v0 (f7 (f8 (f9 (f10 (f11 f12 ?v1) ?v2) ?v3)) f6)) f1) (=> (forall ((?v5 S11) (?v6 S11)) (=> (= (f19 (f20 ?v4 ?v5) ?v6) f1) (= (f19 (f20 ?v1 ?v5) ?v6) f1))) (= (f5 ?v0 (f7 (f8 (f9 (f10 (f11 f12 ?v4) ?v2) ?v3)) f6)) f1)))))
(assert (forall ((?v0 S2) (?v1 S2) (?v2 S3)) (=> (= (f21 ?v0 (f7 (f8 ?v1) ?v2)) f1) (=> (=> (= ?v0 ?v1) false) (=> (=> (= (f21 ?v0 ?v2) f1) false) false)))))
(assert (forall ((?v0 S2) (?v1 S3) (?v2 S2)) (=> (=> (not (= (f21 ?v0 ?v1) f1)) (= ?v0 ?v2)) (= (f21 ?v0 (f7 (f8 ?v2) ?v1)) f1))))
(assert (forall ((?v0 S3) (?v1 S6) (?v2 S8) (?v3 S6) (?v4 S6) (?v5 S6)) (=> (= (f5 ?v0 (f7 (f8 (f9 (f10 (f11 f12 ?v1) ?v2) ?v3)) f6)) f1) (=> (forall ((?v6 S11) (?v7 S11)) (=> (= (f19 (f20 ?v4 ?v6) ?v7) f1) (forall ((?v8 S11)) (=> (forall ((?v9 S11)) (=> (= (f19 (f20 ?v1 ?v9) ?v7) f1) (= (f19 (f20 ?v3 ?v9) ?v8) f1))) (= (f19 (f20 ?v5 ?v6) ?v8) f1))))) (= (f5 ?v0 (f7 (f8 (f9 (f10 (f11 f12 ?v4) ?v2) ?v5)) f6)) f1)))))
(assert (forall ((?v0 S2)) (=> (= (f21 ?v0 f6) f1) false)))
(assert (forall ((?v0 S13) (?v1 S6) (?v2 S8) (?v3 S6)) (= (f22 (f23 f24 ?v0) (f9 (f10 (f11 f12 ?v1) ?v2) ?v3)) (f25 f26 0))))
(assert (forall ((?v0 S2) (?v1 S3)) (not (= f6 (f7 (f8 ?v0) ?v1)))))
(assert (forall ((?v0 S2) (?v1 S3)) (not (= (f7 (f8 ?v0) ?v1) f6))))
(assert (forall ((?v0 S2) (?v1 S2)) (= (= (f21 ?v0 (f7 (f8 ?v1) f6)) f1) (= ?v0 ?v1))))
(assert (forall ((?v0 S3) (?v1 S2)) (=> (= ?v0 f6) (not (= (f21 ?v1 ?v0) f1)))))
(assert (forall ((?v0 S3)) (= (= (f27 ?v0) f6) (forall ((?v1 S2)) (not (= (f3 ?v0 ?v1) f1))))))
(assert (forall ((?v0 S2)) (= (= (f21 ?v0 f6) f1) false)))
(assert (forall ((?v0 S3)) (= (= f6 (f27 ?v0)) (forall ((?v1 S2)) (not (= (f3 ?v0 ?v1) f1))))))
(assert (forall ((?v0 S3)) (= (forall ((?v1 S2)) (=> (= (f21 ?v1 f6) f1) (= (f3 ?v0 ?v1) f1))) true)))
(assert (forall ((?v0 S3)) (= (exists ((?v1 S2)) (and (= (f21 ?v1 f6) f1) (= (f3 ?v0 ?v1) f1))) false)))
(assert (forall ((?v0 S3)) (= (exists ((?v1 S2)) (= (f21 ?v1 ?v0) f1)) (not (= ?v0 f6)))))
(assert (forall ((?v0 S3)) (= (forall ((?v1 S2)) (not (= (f21 ?v1 ?v0) f1))) (= ?v0 f6))))
(assert (= f6 (f27 f4)))
(assert (forall ((?v0 S2) (?v1 S3)) (=> (= (f21 ?v0 ?v1) f1) (= (f7 (f8 ?v0) ?v1) ?v1))))
(assert (forall ((?v0 S2) (?v1 S3) (?v2 S2)) (=> (= (f21 ?v0 ?v1) f1) (= (f21 ?v0 (f7 (f8 ?v2) ?v1)) f1))))
(assert (forall ((?v0 S2) (?v1 S3) (?v2 S3)) (let ((?v_0 (f8 ?v0))) (=> (not (= (f21 ?v0 ?v1) f1)) (=> (not (= (f21 ?v0 ?v2) f1)) (= (= (f7 ?v_0 ?v1) (f7 ?v_0 ?v2)) (= ?v1 ?v2)))))))
(assert (forall ((?v0 S2) (?v1 S3) (?v2 S2)) (= (= (f3 (f7 (f8 ?v0) ?v1) ?v2) f1) (or (= ?v0 ?v2) (= (f3 ?v1 ?v2) f1)))))
(assert (forall ((?v0 S2) (?v1 S2) (?v2 S3)) (= (= (f21 ?v0 (f7 (f8 ?v1) ?v2)) f1) (or (= ?v0 ?v1) (= (f21 ?v0 ?v2) f1)))))
(assert (forall ((?v0 S15)) (= (f25 f26 (f28 f29 ?v0)) ?v0)))
(assert (forall ((?v0 Int)) (=> (<= 0 ?v0) (= (f28 f29 (f25 f26 ?v0)) ?v0))))
(assert (forall ((?v0 Int)) (=> (< ?v0 0) (= (f28 f29 (f25 f26 ?v0)) 0))))
(check-sat)
(exit)
