(set-info :smt-lib-version 2.6)
(set-logic UFLIA)
(set-info :source |Benchmarks from the paper: "Extending Sledgehammer with SMT Solvers" by Jasmin Blanchette, Sascha Bohme, and Lawrence C. Paulson, CADE 2011.  Translated to SMT2 by Andrew Reynolds and Morgan Deters.|)
(set-info :category "industrial")
(set-info :status unknown)
(declare-sort S1 0)
(declare-sort S2 0)
(declare-sort S3 0)
(declare-sort S4 0)
(declare-sort S5 0)
(declare-sort S6 0)
(declare-sort S7 0)
(declare-sort S8 0)
(declare-fun f1 () S1)
(declare-fun f2 () S1)
(declare-fun f3 (S2 S2) S1)
(declare-fun f4 () S2)
(declare-fun f5 () S2)
(declare-fun f6 (S2 S2) S1)
(declare-fun f7 (S4 S2) S1)
(declare-fun f8 (S2 S4) S1)
(declare-fun f9 (S3) S2)
(declare-fun f10 () S2)
(declare-fun f11 (S2 S2) S1)
(declare-fun f12 (S5 S2) S2)
(declare-fun f13 (S4) S5)
(declare-fun f14 () S1)
(declare-fun f15 (S7 Int) S3)
(declare-fun f16 () S7)
(declare-fun f17 (S8 S3) Int)
(declare-fun f18 () S8)
(assert (not (= f1 f2)))
(assert (not (= (f3 f4 f5) f1)))
(assert (= (f6 f4 f5) f1))
(assert (forall ((?v0 S2) (?v1 S2) (?v2 S2)) (=> (= (f6 ?v0 ?v1) f1) (=> (= (f6 ?v2 ?v0) f1) (= (f6 ?v2 ?v1) f1)))))
(assert (forall ((?v0 S2) (?v1 S2)) (= (= (f3 ?v0 ?v1) f1) (forall ((?v2 S3)) (=> (forall ((?v3 S4)) (=> (= (f7 ?v3 ?v0) f1) (= (f8 (f9 ?v2) ?v3) f1))) (forall ((?v3 S4)) (=> (= (f7 ?v3 ?v1) f1) (= (f8 (f9 ?v2) ?v3) f1))))))))
(assert (forall ((?v0 S2)) (= (f6 ?v0 f10) f1)))
(assert (forall ((?v0 S2) (?v1 S2)) (=> (= (f11 ?v0 ?v1) f1) (= (f6 ?v1 ?v0) f1))))
(assert (forall ((?v0 S2) (?v1 S2) (?v2 S2)) (=> (= (f6 ?v0 ?v1) f1) (=> (= (f11 ?v2 ?v1) f1) (= (f6 ?v0 ?v2) f1)))))
(assert (forall ((?v0 S2) (?v1 S2) (?v2 S2)) (=> (= (f6 ?v0 ?v1) f1) (=> (= (f11 ?v0 ?v2) f1) (= (f6 ?v2 ?v1) f1)))))
(assert (forall ((?v0 S2) (?v1 S4) (?v2 S2)) (let ((?v_0 (f13 ?v1))) (=> (= (f6 ?v0 (f12 ?v_0 f10)) f1) (=> (= (f6 ?v0 ?v2) f1) (= (f6 ?v0 (f12 ?v_0 ?v2)) f1))))))
(assert (forall ((?v0 S2) (?v1 S4) (?v2 S2)) (let ((?v_0 (f13 ?v1))) (=> (= (f6 ?v0 (f12 ?v_0 ?v2)) f1) (and (= (f6 ?v0 (f12 ?v_0 f10)) f1) (= (f6 ?v0 ?v2) f1))))))
(assert (= (= f14 f1) (exists ((?v0 S6) (?v1 S6)) (not (= ?v0 ?v1)))))
(assert (=> (= f14 f1) (forall ((?v0 S6)) (=> (forall ((?v1 S6)) (= ?v1 ?v0)) false))))
(assert (forall ((?v0 S2) (?v1 S3)) (=> (forall ((?v2 S4)) (=> (= (f7 ?v2 ?v0) f1) (= (f8 (f9 (f15 f16 (+ (f17 f18 ?v1) 1))) ?v2) f1))) (forall ((?v2 S4)) (=> (= (f7 ?v2 ?v0) f1) (= (f8 (f9 ?v1) ?v2) f1))))))
(assert (forall ((?v0 S3) (?v1 S4)) (=> (= (f8 (f9 (f15 f16 (+ (f17 f18 ?v0) 1))) ?v1) f1) (= (f8 (f9 ?v0) ?v1) f1))))
(assert (forall ((?v0 S2)) (= (f11 f10 ?v0) f1)))
(assert (forall ((?v0 S2) (?v1 S4)) (let ((?v_0 (f12 (f13 ?v1) f10))) (=> (= (f11 ?v0 ?v_0) f1) (or (= ?v0 f10) (= ?v0 ?v_0))))))
(assert (forall ((?v0 S2) (?v1 S2) (?v2 S4)) (=> (= (f11 ?v0 ?v1) f1) (=> (= (f7 ?v2 ?v0) f1) (= (f7 ?v2 ?v1) f1)))))
(assert (forall ((?v0 S2) (?v1 S2)) (=> (= (f11 ?v0 ?v1) f1) (=> (= (f11 ?v1 ?v0) f1) (= ?v0 ?v1)))))
(assert (forall ((?v0 S4) (?v1 S4) (?v2 S2)) (=> (= (f7 ?v0 (f12 (f13 ?v1) ?v2)) f1) (=> (=> (= ?v0 ?v1) false) (=> (=> (= (f7 ?v0 ?v2) f1) false) false)))))
(assert (forall ((?v0 S4) (?v1 S2) (?v2 S4)) (=> (=> (not (= (f7 ?v0 ?v1) f1)) (= ?v0 ?v2)) (= (f7 ?v0 (f12 (f13 ?v2) ?v1)) f1))))
(assert (forall ((?v0 S4)) (=> (= (f7 ?v0 f10) f1) false)))
(assert (forall ((?v0 S2)) (= (f11 ?v0 ?v0) f1)))
(assert (forall ((?v0 S2) (?v1 S4)) (= (f11 ?v0 (f12 (f13 ?v1) ?v0)) f1)))
(assert (forall ((?v0 S4) (?v1 S2) (?v2 S2)) (= (= (f11 (f12 (f13 ?v0) ?v1) ?v2) f1) (and (= (f7 ?v0 ?v2) f1) (= (f11 ?v1 ?v2) f1)))))
(assert (forall ((?v0 S4) (?v1 S2) (?v2 S2)) (=> (not (= (f7 ?v0 ?v1) f1)) (= (= (f11 ?v1 (f12 (f13 ?v0) ?v2)) f1) (= (f11 ?v1 ?v2) f1)))))
(assert (forall ((?v0 S2) (?v1 S2) (?v2 S2)) (=> (= (f11 ?v0 ?v1) f1) (=> (= (f11 ?v2 ?v0) f1) (= (f11 ?v2 ?v1) f1)))))
(assert (forall ((?v0 S2) (?v1 S2)) (=> (= (f11 ?v0 ?v1) f1) (=> (= (f11 ?v1 ?v0) f1) (= ?v1 ?v0)))))
(assert (forall ((?v0 S2) (?v1 S2) (?v2 S2)) (=> (= (f11 ?v0 ?v1) f1) (=> (= (f11 ?v1 ?v2) f1) (= (f11 ?v0 ?v2) f1)))))
(assert (forall ((?v0 S2) (?v1 S2)) (=> (= (f11 ?v0 ?v1) f1) (=> (= (f11 ?v1 ?v0) f1) (= ?v0 ?v1)))))
(assert (forall ((?v0 S2) (?v1 S2) (?v2 S2)) (=> (= (f11 ?v0 ?v1) f1) (=> (= ?v0 ?v2) (= (f11 ?v2 ?v1) f1)))))
(assert (forall ((?v0 S2) (?v1 S2) (?v2 S2)) (=> (= (f11 ?v0 ?v1) f1) (=> (= ?v1 ?v2) (= (f11 ?v0 ?v2) f1)))))
(assert (forall ((?v0 S3)) (= (f15 f16 (f17 f18 ?v0)) ?v0)))
(assert (forall ((?v0 Int)) (=> (<= 0 ?v0) (= (f17 f18 (f15 f16 ?v0)) ?v0))))
(assert (forall ((?v0 Int)) (=> (< ?v0 0) (= (f17 f18 (f15 f16 ?v0)) 0))))
(check-sat)
(exit)
