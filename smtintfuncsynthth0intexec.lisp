(compile-file "smtintfuncsynthth0int.lisp")
(load "smtintfuncsynthth0int.fasl")
(defun main ()
  (declaim (sb-ext:muffle-conditions cl:warning))
  (if (not (cdr sb-ext:*posix-argv*))
      (format t "Usage: smtintfuncsynthth0int [-t <mstimelimit>] [-v <num>] [-lash <lashexec>] [-cvc5 <cvc5exec>] <smt2file>~%")
    (let ((fn (car (last sb-ext:*posix-argv*))))
      (let ((tm (member "-t" sb-ext:*posix-argv* :test #'equal)))
	(when tm (setq *tlimitms* (read-from-string (cadr tm)))))
      (let ((v (member "-v" sb-ext:*posix-argv* :test #'equal)))
	(when v (setq *verbosity* (read-from-string (cadr v)))))
      (let ((l (member "-vampireho" sb-ext:*posix-argv* :test #'equal)))
	(when l (setq *vampireho* (cadr l))))
      (let ((l (member "-lash" sb-ext:*posix-argv* :test #'equal)))
	(when l (setq *lash* (cadr l))))
      (let ((l (member "-cvc5" sb-ext:*posix-argv* :test #'equal)))
	(when l (setq *cvc5* (cadr l))))
      (let ((l (member "-bbcvc5" sb-ext:*posix-argv* :test #'equal)))
	(when l (setq *break-before-cvc5* t)))
      (let ((l (member "-l" sb-ext:*posix-argv* :test #'equal)))
	(when l (load (cadr l))))
      (let ((b (member "-beamsize" sb-ext:*posix-argv* :test #'equal)))
	(when b (setq *beamsize* (read-from-string (cadr b)))))
      (let ((b (member "-synthdepth" sb-ext:*posix-argv* :test #'equal)))
	(when b (setq *synthdepth* (read-from-string (cadr b)))))
      (let ((b (member "-keepfac" sb-ext:*posix-argv* :test #'equal)))
	(when b (setq *keepfac* (read-from-string (cadr b)))))
      (let ((nf (member "-negfeatures" sb-ext:*posix-argv* :test #'equal)))
	(when nf
	  (setq *negfeatures* nil)
	  (let ((g (open (cadr nf) :direction :input))
		(l nil))
	    (loop while (setq l (read g nil nil)) do (push l *negfeatures*))
	    (close g))))
      (let ((pf (member "-posfeatures" sb-ext:*posix-argv* :test #'equal)))
	(when pf
	  (setq *posfeatures* nil)
	  (let ((g (open (cadr pf) :direction :input))
		(l nil))
	    (loop while (setq l (read g nil nil)) do (push l *posfeatures*))
	    (close g))))
      (smtintfuncsynth-th0int fn)
      (exit))))

(sb-ext:save-lisp-and-die "smtintfuncsynthth0int" :save-runtime-options t :executable t :toplevel #'main)
